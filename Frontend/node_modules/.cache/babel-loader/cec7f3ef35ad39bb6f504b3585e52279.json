{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"components\", \"inputFormat\", \"maxTime\", \"minTime\", \"openTo\", \"views\"];\nimport { useThemeProps } from '@material-ui/core/styles';\nimport ClockIcon from '../internal/svg-icons/Clock';\nimport { pick12hOr24hFormat } from '../internal/pickers/text-field-helper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\n\nfunction getTextFieldAriaText(value, utils) {\n  return value && utils.isValid(utils.date(value)) ? `Choose time, selected time is ${utils.format(utils.date(value), 'fullTime')}` : 'Choose time';\n}\n\nexport function useTimePickerDefaultizedProps(_ref, name) {\n  let {\n    ampm,\n    components,\n    inputFormat,\n    maxTime,\n    minTime,\n    openTo = 'hours',\n    views = ['hours', 'minutes']\n  } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const utils = useUtils();\n  const willUseAmPm = ampm != null ? ampm : utils.is12HourCycleInCurrentLocale();\n  return useThemeProps({\n    props: _extends({\n      views,\n      openTo,\n      minTime: useParsedDate(minTime),\n      maxTime: useParsedDate(maxTime),\n      ampm: willUseAmPm,\n      acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n      mask: '__:__',\n      disableMaskedInput: willUseAmPm,\n      getOpenDialogAriaText: getTextFieldAriaText,\n      components: _extends({\n        OpenPickerIcon: ClockIcon\n      }, components),\n      inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n        localized: utils.formats.fullTime,\n        '12h': utils.formats.fullTime12h,\n        '24h': utils.formats.fullTime24h\n      })\n    }, other),\n    name\n  });\n}","map":{"version":3,"sources":["/home/rahul/Desktop/Manthan/client/node_modules/@material-ui/lab/TimePicker/shared.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","useThemeProps","ClockIcon","pick12hOr24hFormat","useUtils","useParsedDate","getTextFieldAriaText","value","utils","isValid","date","format","useTimePickerDefaultizedProps","_ref","name","ampm","components","inputFormat","maxTime","minTime","openTo","views","other","willUseAmPm","is12HourCycleInCurrentLocale","props","acceptRegex","mask","disableMaskedInput","getOpenDialogAriaText","OpenPickerIcon","localized","formats","fullTime","fullTime12h","fullTime24h"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,MAAD,EAAS,YAAT,EAAuB,aAAvB,EAAsC,SAAtC,EAAiD,SAAjD,EAA4D,QAA5D,EAAsE,OAAtE,CAAlB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,kBAAT,QAAmC,uCAAnC;AACA,SAASC,QAAT,QAAyB,oCAAzB;AACA,SAASC,aAAT,QAA8B,8CAA9B;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,KAArC,EAA4C;AAC1C,SAAOD,KAAK,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,KAAX,CAAd,CAAT,GAA6C,iCAAgCC,KAAK,CAACG,MAAN,CAAaH,KAAK,CAACE,IAAN,CAAWH,KAAX,CAAb,EAAgC,UAAhC,CAA4C,EAAzH,GAA6H,aAApI;AACD;;AAED,OAAO,SAASK,6BAAT,CAAuCC,IAAvC,EAA6CC,IAA7C,EAAmD;AACxD,MAAI;AACFC,IAAAA,IADE;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,OAJE;AAKFC,IAAAA,OALE;AAMFC,IAAAA,MAAM,GAAG,OANP;AAOFC,IAAAA,KAAK,GAAG,CAAC,OAAD,EAAU,SAAV;AAPN,MAQAR,IARJ;AAAA,MASIS,KAAK,GAAGvB,6BAA6B,CAACc,IAAD,EAAOb,SAAP,CATzC;;AAWA,QAAMQ,KAAK,GAAGJ,QAAQ,EAAtB;AACA,QAAMmB,WAAW,GAAGR,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsBP,KAAK,CAACgB,4BAAN,EAA1C;AACA,SAAOvB,aAAa,CAAC;AACnBwB,IAAAA,KAAK,EAAE3B,QAAQ,CAAC;AACduB,MAAAA,KADc;AAEdD,MAAAA,MAFc;AAGdD,MAAAA,OAAO,EAAEd,aAAa,CAACc,OAAD,CAHR;AAIdD,MAAAA,OAAO,EAAEb,aAAa,CAACa,OAAD,CAJR;AAKdH,MAAAA,IAAI,EAAEQ,WALQ;AAMdG,MAAAA,WAAW,EAAEH,WAAW,GAAG,YAAH,GAAkB,MAN5B;AAOdI,MAAAA,IAAI,EAAE,OAPQ;AAQdC,MAAAA,kBAAkB,EAAEL,WARN;AASdM,MAAAA,qBAAqB,EAAEvB,oBATT;AAUdU,MAAAA,UAAU,EAAElB,QAAQ,CAAC;AACnBgC,QAAAA,cAAc,EAAE5B;AADG,OAAD,EAEjBc,UAFiB,CAVN;AAadC,MAAAA,WAAW,EAAEd,kBAAkB,CAACc,WAAD,EAAcM,WAAd,EAA2B;AACxDQ,QAAAA,SAAS,EAAEvB,KAAK,CAACwB,OAAN,CAAcC,QAD+B;AAExD,eAAOzB,KAAK,CAACwB,OAAN,CAAcE,WAFmC;AAGxD,eAAO1B,KAAK,CAACwB,OAAN,CAAcG;AAHmC,OAA3B;AAbjB,KAAD,EAkBZb,KAlBY,CADI;AAoBnBR,IAAAA;AApBmB,GAAD,CAApB;AAsBD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"components\", \"inputFormat\", \"maxTime\", \"minTime\", \"openTo\", \"views\"];\nimport { useThemeProps } from '@material-ui/core/styles';\nimport ClockIcon from '../internal/svg-icons/Clock';\nimport { pick12hOr24hFormat } from '../internal/pickers/text-field-helper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\n\nfunction getTextFieldAriaText(value, utils) {\n  return value && utils.isValid(utils.date(value)) ? `Choose time, selected time is ${utils.format(utils.date(value), 'fullTime')}` : 'Choose time';\n}\n\nexport function useTimePickerDefaultizedProps(_ref, name) {\n  let {\n    ampm,\n    components,\n    inputFormat,\n    maxTime,\n    minTime,\n    openTo = 'hours',\n    views = ['hours', 'minutes']\n  } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const utils = useUtils();\n  const willUseAmPm = ampm != null ? ampm : utils.is12HourCycleInCurrentLocale();\n  return useThemeProps({\n    props: _extends({\n      views,\n      openTo,\n      minTime: useParsedDate(minTime),\n      maxTime: useParsedDate(maxTime),\n      ampm: willUseAmPm,\n      acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n      mask: '__:__',\n      disableMaskedInput: willUseAmPm,\n      getOpenDialogAriaText: getTextFieldAriaText,\n      components: _extends({\n        OpenPickerIcon: ClockIcon\n      }, components),\n      inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n        localized: utils.formats.fullTime,\n        '12h': utils.formats.fullTime12h,\n        '24h': utils.formats.fullTime24h\n      })\n    }, other),\n    name\n  });\n}"]},"metadata":{},"sourceType":"module"}