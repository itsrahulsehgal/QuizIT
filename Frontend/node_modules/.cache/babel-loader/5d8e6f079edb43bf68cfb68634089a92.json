{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport setAuthToken from '../utils/setAuthToken';\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, LOGOUT, AUTH_RESET } from './actionTypes';\nconst settings = {\n  position: 'bottom-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined\n}; // Load user\n\nexport const loadUser = () => async dispatch => {\n  dispatch({\n    type: AUTH_RESET\n  });\n\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    // get user data\n    const res = await axios.get(`/api/auth`);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // add alert for each error later\n// Register User\n\nexport const register = ({\n  Fname,\n  Lname,\n  email,\n  password\n}) => async dispatch => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    Fname,\n    Lname,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`/api/users`, body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    toast.success('Registered Successfully !', settings);\n    dispatch(loadUser());\n  } catch (err) {\n    if (err.response.status === 400) {\n      toast.error('User already exists !', settings);\n    } else {\n      toast.error('Unable to Register !', settings);\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // google auth\n// export const googleAuth =\n//   ({ name, email }) =>\n//   async (dispatch) => {\n//     try {\n//       toast.success('Authenticated Successfully!', settings);\n//\n//       dispatch(loadUser());\n//     } catch (err) {\n//       dispatch({\n//         type: REGISTER_FAIL\n//       });\n//\n//       toast.error('Unable to Authenticate !', settings);\n//     }\n//   };\n// Login User\n\nexport const login = ({\n  email,\n  password,\n  remember\n}) => async dispatch => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password,\n    remember\n  });\n\n  try {\n    const res = await axios.post(`/api/auth`, body, config);\n    toast.success('Logged In Successfully !', settings);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    toast.error('Invalid Credentials !', settings);\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  setAuthToken(null);\n  dispatch({\n    type: LOGOUT\n  });\n  toast.success('Logged Out Successfully !', settings);\n};","map":{"version":3,"sources":["/home/rahul/Desktop/Manthan/client/src/actions/auth.js"],"names":["axios","toast","setAuthToken","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","LOGOUT","AUTH_RESET","settings","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","loadUser","dispatch","type","localStorage","token","res","get","payload","data","err","register","Fname","Lname","email","password","config","headers","body","JSON","stringify","post","success","response","status","error","login","remember","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { toast } from 'react-toastify';\nimport setAuthToken from '../utils/setAuthToken';\nimport {\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_FAIL,\n  REGISTER_SUCCESS,\n  USER_LOADED,\n  LOGOUT,\n  AUTH_RESET\n} from './actionTypes';\n\nconst settings = {\n  position: 'bottom-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined\n};\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    // get user data\n    const res = await axios.get(`/api/auth`);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// add alert for each error later\n// Register User\nexport const register =\n  ({ Fname, Lname, email, password }) =>\n  async (dispatch) => {\n    dispatch({\n      type: AUTH_RESET\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      Fname,\n      Lname,\n      email,\n      password\n    });\n    try {\n      const res = await axios.post(`/api/users`, body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      toast.success('Registered Successfully !', settings);\n      dispatch(loadUser());\n    } catch (err) {\n      if (err.response.status === 400) {\n        toast.error('User already exists !', settings);\n      } else {\n        toast.error('Unable to Register !', settings);\n      }\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n\n// google auth\n// export const googleAuth =\n//   ({ name, email }) =>\n//   async (dispatch) => {\n//     try {\n//       toast.success('Authenticated Successfully!', settings);\n//\n//       dispatch(loadUser());\n//     } catch (err) {\n//       dispatch({\n//         type: REGISTER_FAIL\n//       });\n//\n//       toast.error('Unable to Authenticate !', settings);\n//     }\n//   };\n\n// Login User\nexport const login =\n  ({ email, password, remember }) =>\n  async (dispatch) => {\n    dispatch({\n      type: AUTH_RESET\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password,\n      remember\n    });\n    try {\n      const res = await axios.post(`/api/auth`, body, config);\n      toast.success('Logged In Successfully !', settings);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      toast.error('Invalid Credentials !', settings);\n    }\n  };\n\nexport const logout = () => (dispatch) => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  setAuthToken(null);\n  dispatch({\n    type: LOGOUT\n  });\n  toast.success('Logged Out Successfully !', settings);\n};\n"]},"metadata":{},"sourceType":"module"}