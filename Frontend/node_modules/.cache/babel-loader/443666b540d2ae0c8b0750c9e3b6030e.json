{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@material-ui/core/styles';\nimport MobileWrapper from '../internal/pickers/wrappers/MobileWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [MobileDateRangePicker API](https://material-ui.com/api/mobile-date-range-picker/)\n */\nconst MobileDateRangePicker = /*#__PURE__*/React.forwardRef(function MobileDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMobileDateRangePicker'\n  });\n  const {\n      calendars = 2,\n      value,\n      onChange,\n      mask = '__/__/____',\n      startText = 'Start',\n      endText = 'End',\n      inputFormat: passedInputFormat,\n      minDate: minDateProp,\n      maxDate: maxDateProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDateRangePicker.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default MobileDateRangePicker;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useThemeProps","MobileWrapper","useDefaultDates","useUtils","useDateRangeValidation","usePickerState","DateRangePickerView","DateRangePickerInput","parseRangeInputValue","jsx","_jsx","PureDateInputComponent","rangePickerValueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","MobileDateRangePicker","forwardRef","inProps","ref","props","name","calendars","value","onChange","mask","startText","endText","inputFormat","passedInputFormat","minDate","minDateProp","maxDate","maxDateProp","other","defaultDates","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","pickerStateProps","restProps","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","formats","keyboardDate","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowSameDateSelection","bool","autoFocus","oneOf","cancelText","node","className","string","clearable","clearText","components","shape","LeftArrowButton","elementType","LeftArrowIcon","OpenPickerIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","object","defaultCalendarMonth","any","DialogProps","disableAutoMonthSwitching","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","InputProps","inputRef","oneOfType","current","key","number","label","leftArrowButtonText","loading","okText","onAccept","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","OpenPickerButtonProps","orientation","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showTodayButton","showToolbar","todayText","ToolbarComponent","toolbarFormat","toolbarPlaceholder","toolbarTitle","arrayOf","Date"],"sources":["/home/rahul/Desktop/client/node_modules/@material-ui/lab/MobileDateRangePicker/MobileDateRangePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@material-ui/core/styles';\nimport MobileWrapper from '../internal/pickers/wrappers/MobileWrapper';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [MobileDateRangePicker API](https://material-ui.com/api/mobile-date-range-picker/)\n */\nconst MobileDateRangePicker = /*#__PURE__*/React.forwardRef(function MobileDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMobileDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp,\n    maxDate: maxDateProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates();\n  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '–'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default MobileDateRangePicker;"],"mappings":"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"},"metadata":{},"sourceType":"module"}