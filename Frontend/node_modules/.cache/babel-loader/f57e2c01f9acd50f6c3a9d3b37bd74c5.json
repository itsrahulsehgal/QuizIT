{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport setAuthToken from '../utils/setAuthToken';\nimport { AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, LOGOUT, AUTH_RESET } from './actionTypes';\nconst settings = {\n  position: 'bottom-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined\n};\n\n// Load user\nexport const loadUser = () => async dispatch => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    // get user data\n    const res = await axios.get(`/api/auth`);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// add alert for each error later\n// Register User\nexport const register = _ref => {\n  let {\n    Fname,\n    Lname,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: AUTH_RESET\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      Fname,\n      Lname,\n      email,\n      password\n    });\n    try {\n      const res = await axios.post(`/api/users`, body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      toast.success('Registered Successfully !', settings);\n      dispatch(loadUser());\n    } catch (err) {\n      if (err.response.status === 400) {\n        toast.error('User already exists !', settings);\n      } else {\n        toast.error('Unable to Register !', settings);\n      }\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n};\n\n// google auth\n// export const googleAuth =\n//   ({ name, email }) =>\n//   async (dispatch) => {\n//     try {\n//       toast.success('Authenticated Successfully!', settings);\n//\n//       dispatch(loadUser());\n//     } catch (err) {\n//       dispatch({\n//         type: REGISTER_FAIL\n//       });\n//\n//       toast.error('Unable to Authenticate !', settings);\n//     }\n//   };\n\n// Login User\nexport const login = _ref2 => {\n  let {\n    email,\n    password,\n    remember\n  } = _ref2;\n  return async dispatch => {\n    dispatch({\n      type: AUTH_RESET\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password,\n      remember\n    });\n    try {\n      const res = await axios.post(`/api/auth`, body, config);\n      toast.success('Logged In Successfully !', settings);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      toast.error('Invalid Credentials !', settings);\n    }\n  };\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  setAuthToken(null);\n  dispatch({\n    type: LOGOUT\n  });\n  toast.success('Logged Out Successfully !', settings);\n};","map":{"version":3,"names":["axios","toast","setAuthToken","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","LOGOUT","AUTH_RESET","settings","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","loadUser","dispatch","type","localStorage","token","res","get","payload","data","err","register","_ref","Fname","Lname","email","password","config","headers","body","JSON","stringify","post","success","response","status","error","login","_ref2","remember","logout"],"sources":["/home/rahul/Desktop/client/src/actions/auth.js"],"sourcesContent":["import axios from 'axios';\n\nimport { toast } from 'react-toastify';\nimport setAuthToken from '../utils/setAuthToken';\nimport {\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_FAIL,\n  REGISTER_SUCCESS,\n  USER_LOADED,\n  LOGOUT,\n  AUTH_RESET\n} from './actionTypes';\n\nconst settings = {\n  position: 'bottom-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined\n};\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    // get user data\n    const res = await axios.get(`/api/auth`);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// add alert for each error later\n// Register User\nexport const register =\n  ({ Fname, Lname, email, password }) =>\n  async (dispatch) => {\n    dispatch({\n      type: AUTH_RESET\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      Fname,\n      Lname,\n      email,\n      password\n    });\n    try {\n      const res = await axios.post(`/api/users`, body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      toast.success('Registered Successfully !', settings);\n      dispatch(loadUser());\n    } catch (err) {\n      if (err.response.status === 400) {\n        toast.error('User already exists !', settings);\n      } else {\n        toast.error('Unable to Register !', settings);\n      }\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n\n// google auth\n// export const googleAuth =\n//   ({ name, email }) =>\n//   async (dispatch) => {\n//     try {\n//       toast.success('Authenticated Successfully!', settings);\n//\n//       dispatch(loadUser());\n//     } catch (err) {\n//       dispatch({\n//         type: REGISTER_FAIL\n//       });\n//\n//       toast.error('Unable to Authenticate !', settings);\n//     }\n//   };\n\n// Login User\nexport const login =\n  ({ email, password, remember }) =>\n  async (dispatch) => {\n    dispatch({\n      type: AUTH_RESET\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password,\n      remember\n    });\n    try {\n      const res = await axios.post(`/api/auth`, body, config);\n      toast.success('Logged In Successfully !', settings);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      toast.error('Invalid Credentials !', settings);\n    }\n  };\n\nexport const logout = () => (dispatch) => {\n  dispatch({\n    type: AUTH_RESET\n  });\n  setAuthToken(null);\n  dispatch({\n    type: LOGOUT\n  });\n  toast.success('Logged Out Successfully !', settings);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}