{"ast":null,"code":"import { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { GET_TEST, SUBMIT_TEST, CLASS_ERROR, CLASS_RESET } from './actionTypes';\nconst config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\nconst settings = {\n  position: 'bottom-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined\n}; // Start Current Test\n\nexport const getTest = id => async dispatch => {\n  dispatch({\n    type: CLASS_RESET\n  });\n\n  try {\n    const res = await axios.get(`/api/tests/id/${id}`, config);\n    dispatch({\n      type: GET_TEST,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data;\n\n    if (errors) {\n      toast.error(errors.msg, settings);\n    }\n\n    dispatch({\n      type: CLASS_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Start Current Test\n\nexport const startTest = id => async dispatch => {\n  dispatch({\n    type: CLASS_RESET\n  });\n\n  try {\n    const res = await axios.get(`/api/tests/start/${id}`);\n    dispatch({\n      type: GET_TEST,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data;\n    console.log(err.response);\n\n    if (errors) {\n      toast.error(errors.msg, settings);\n    }\n\n    dispatch({\n      type: CLASS_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Submit current test\n\nexport const submitTest = (id, response) => async dispatch => {\n  dispatch({\n    type: CLASS_RESET\n  });\n\n  try {\n    await axios.post(`/api/tests/id/${id}`, response, config);\n    toast.success('Test submitted sucessfully.', settings);\n    dispatch({\n      type: SUBMIT_TEST\n    });\n  } catch (err) {\n    const errors = err.response.data;\n    console.log(err.response);\n\n    if (errors) {\n      toast.error(errors.msg, settings);\n    }\n\n    dispatch({\n      type: CLASS_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/rahul/Desktop/Manthan/client/src/actions/test.js"],"names":["toast","axios","GET_TEST","SUBMIT_TEST","CLASS_ERROR","CLASS_RESET","config","headers","settings","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","getTest","id","dispatch","type","res","get","payload","data","err","errors","response","error","msg","statusText","status","startTest","console","log","submitTest","post","success"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { GET_TEST, SUBMIT_TEST, CLASS_ERROR, CLASS_RESET } from './actionTypes';\n\nconst config = {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst settings = {\n  position: 'bottom-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined\n};\n\n// Start Current Test\nexport const getTest = (id) => async (dispatch) => {\n  dispatch({\n    type: CLASS_RESET\n  });\n  try {\n    const res = await axios.get(`/api/tests/id/${id}`, config);\n    dispatch({\n      type: GET_TEST,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data;\n    if (errors) {\n      toast.error(errors.msg, settings);\n    }\n    dispatch({\n      type: CLASS_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Start Current Test\nexport const startTest = (id) => async (dispatch) => {\n  dispatch({\n    type: CLASS_RESET\n  });\n  try {\n    const res = await axios.get(`/api/tests/start/${id}`);\n    dispatch({\n      type: GET_TEST,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data;\n    console.log(err.response);\n    if (errors) {\n      toast.error(errors.msg, settings);\n    }\n    dispatch({\n      type: CLASS_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n\n// Submit current test\nexport const submitTest = (id, response) => async (dispatch) => {\n  dispatch({\n    type: CLASS_RESET\n  });\n  try {\n    await axios.post(`/api/tests/id/${id}`, response, config);\n    toast.success('Test submitted sucessfully.', settings);\n    dispatch({\n      type: SUBMIT_TEST\n    });\n  } catch (err) {\n    const errors = err.response.data;\n    console.log(err.response);\n    if (errors) {\n      toast.error(errors.msg, settings);\n    }\n    dispatch({\n      type: CLASS_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}