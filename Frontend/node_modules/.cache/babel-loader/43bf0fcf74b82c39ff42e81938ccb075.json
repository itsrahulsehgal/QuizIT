{"ast":null,"code":"import { GET_CLASS, EDIT_CLASS, CLASS_ERROR, CLASS_RESET, GET_TESTS, CREATE_TEST, DELETE_TEST, GET_TEST, SUBMIT_TEST, GET_USER } from '../actions/actionTypes';\nconst initialState = {\n  loading: false,\n  currClass: null,\n  currTest: null,\n  tests: [],\n  users: []\n};\n\n// switch case block and then returning data acc to the action type\nexport default function ClassReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case CLASS_ERROR:\n      {\n        return {\n          ...state,\n          currClass: null,\n          loading: false\n        };\n      }\n    case GET_USER:\n      return {\n        ...state,\n        users: action.payload,\n        loading: false\n      };\n    case GET_TESTS:\n      return {\n        ...state,\n        tests: action.payload,\n        loading: false\n      };\n    case GET_TEST:\n      return {\n        ...state,\n        currTest: action.payload,\n        loading: false\n      };\n    case SUBMIT_TEST:\n      return {\n        ...state,\n        test: null,\n        loading: false\n      };\n    case CREATE_TEST:\n      {\n        return {\n          ...state,\n          tests: [...state.tests, action.payload],\n          loading: false\n        };\n      }\n    case DELETE_TEST:\n      {\n        return {\n          ...state,\n          tests: state.tests.filter(test => test._id !== action.payload),\n          loading: false\n        };\n      }\n    case GET_CLASS:\n    case EDIT_CLASS:\n      {\n        return {\n          ...state,\n          currClass: action.payload,\n          loading: false\n        };\n      }\n    case CLASS_RESET:\n      {\n        return {\n          ...state,\n          loading: true\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\n_c = ClassReducer;\nvar _c;\n$RefreshReg$(_c, \"ClassReducer\");","map":{"version":3,"names":["GET_CLASS","EDIT_CLASS","CLASS_ERROR","CLASS_RESET","GET_TESTS","CREATE_TEST","DELETE_TEST","GET_TEST","SUBMIT_TEST","GET_USER","initialState","loading","currClass","currTest","tests","users","ClassReducer","state","arguments","length","undefined","action","type","payload","test","filter","_id","_c","$RefreshReg$"],"sources":["/home/rahul/Desktop/client/src/reducers/classroom.js"],"sourcesContent":["import {\n  GET_CLASS,\n  EDIT_CLASS,\n  CLASS_ERROR,\n  CLASS_RESET,\n  GET_TESTS,\n  CREATE_TEST,\n  DELETE_TEST,\n  GET_TEST,\n  SUBMIT_TEST,\n  GET_USER\n} from '../actions/actionTypes';\n\nconst initialState = {\n  loading: false,\n  currClass: null,\n  currTest: null,\n  tests: [],\n  users: []\n};\n\n// switch case block and then returning data acc to the action type\nexport default function ClassReducer(state = initialState, action) {\n  switch (action.type) {\n    case CLASS_ERROR: {\n      return {\n        ...state,\n        currClass: null,\n        loading: false\n      };\n    }\n    case GET_USER:\n      return {\n        ...state,\n        users: action.payload,\n        loading: false\n      };\n    case GET_TESTS:\n      return {\n        ...state,\n        tests: action.payload,\n        loading: false\n      };\n    case GET_TEST:\n      return {\n        ...state,\n        currTest: action.payload,\n        loading: false\n      };\n    case SUBMIT_TEST:\n      return {\n        ...state,\n        test: null,\n        loading: false\n      };\n    case CREATE_TEST: {\n      return {\n        ...state,\n        tests: [...state.tests, action.payload],\n        loading: false\n      };\n    }\n    case DELETE_TEST: {\n      return {\n        ...state,\n        tests: state.tests.filter((test) => test._id !== action.payload),\n        loading: false\n      };\n    }\n    case GET_CLASS:\n    case EDIT_CLASS: {\n      return {\n        ...state,\n        currClass: action.payload,\n        loading: false\n      };\n    }\n    case CLASS_RESET: {\n      return {\n        ...state,\n        loading: true\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n"],"mappings":"AAAA,SACEA,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,SAAS,EACTC,WAAW,EACXC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXC,QAAQ,QACH,wBAAwB;AAE/B,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,IAAI;EACdC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,eAAe,SAASC,YAAYA,CAAA,EAA+B;EAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGR,YAAY;EAAA,IAAEW,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC/D,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAKpB,WAAW;MAAE;QAChB,OAAO;UACL,GAAGe,KAAK;UACRL,SAAS,EAAE,IAAI;UACfD,OAAO,EAAE;QACX,CAAC;MACH;IACA,KAAKF,QAAQ;MACX,OAAO;QACL,GAAGQ,KAAK;QACRF,KAAK,EAAEM,MAAM,CAACE,OAAO;QACrBZ,OAAO,EAAE;MACX,CAAC;IACH,KAAKP,SAAS;MACZ,OAAO;QACL,GAAGa,KAAK;QACRH,KAAK,EAAEO,MAAM,CAACE,OAAO;QACrBZ,OAAO,EAAE;MACX,CAAC;IACH,KAAKJ,QAAQ;MACX,OAAO;QACL,GAAGU,KAAK;QACRJ,QAAQ,EAAEQ,MAAM,CAACE,OAAO;QACxBZ,OAAO,EAAE;MACX,CAAC;IACH,KAAKH,WAAW;MACd,OAAO;QACL,GAAGS,KAAK;QACRO,IAAI,EAAE,IAAI;QACVb,OAAO,EAAE;MACX,CAAC;IACH,KAAKN,WAAW;MAAE;QAChB,OAAO;UACL,GAAGY,KAAK;UACRH,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAK,EAAEO,MAAM,CAACE,OAAO,CAAC;UACvCZ,OAAO,EAAE;QACX,CAAC;MACH;IACA,KAAKL,WAAW;MAAE;QAChB,OAAO;UACL,GAAGW,KAAK;UACRH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACW,MAAM,CAAED,IAAI,IAAKA,IAAI,CAACE,GAAG,KAAKL,MAAM,CAACE,OAAO,CAAC;UAChEZ,OAAO,EAAE;QACX,CAAC;MACH;IACA,KAAKX,SAAS;IACd,KAAKC,UAAU;MAAE;QACf,OAAO;UACL,GAAGgB,KAAK;UACRL,SAAS,EAAES,MAAM,CAACE,OAAO;UACzBZ,OAAO,EAAE;QACX,CAAC;MACH;IACA,KAAKR,WAAW;MAAE;QAChB,OAAO;UACL,GAAGc,KAAK;UACRN,OAAO,EAAE;QACX,CAAC;MACH;IACA;MAAS;QACP,OAAOM,KAAK;MACd;EACF;AACF;AAACU,EAAA,GAjEuBX,YAAY;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}